name: Build and Push Docker Image

on:
  push:
    # 只有当代码被推送到 main 分支时才触发构建
    # 这意味着 Pull Request 被合并后，才会执行
    branches: [ "main" ]
    # 或者，更推荐的方式是基于标签发布：
    # tags:
    #   - 'v*.*.*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # 授予写入 GitHub Packages 的权限

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # 步骤 1: 登入容器仓库 (例如 GitHub Container Registry)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 2: 提取元数据，自动生成镜像标签
      # 这会根据 commit SHA 生成一个唯一的标签，并为 main 分支添加 'latest' 标签
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      # 步骤 3: 设置 Docker Buildx (推荐，以利用最新的构建特性)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 4: 构建并推送镜像
      # 这一步利用了 Docker 的远程缓存 (Registry a cache) 来加速后续构建
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true # 只有在 main 分支的 push 事件时才真正推送
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # 启用缓存，指向 GitHub Packages registry
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:buildcache,mode=max